#include <bits/stdc++.h>
using namespace std;

int findPivot(vector<int>& A, int low, int high) {
    if (high < low)
        return -1;
    if (high == low)
        return low;
    int mid = (low + high) / 2;
    if (mid < high && A[mid] > A[mid + 1])
        return mid;
    if (mid > low && A[mid] < A[mid - 1])
        return (mid - 1);
    if (A[low] >= A[mid])
        return findPivot(A, low, mid - 1);
    return findPivot(A, mid + 1, high);
}

int binarySearch(vector<int>& A, int low, int high, int x) {
    while (low <= high) {
        int mid = (low + high) / 2;
        if (A[mid] == x)
            return mid;
        if (A[mid] < x)
            low = mid + 1;
        else
            high = mid - 1;
    }
    return -1;
}

int findElement(vector<int>& A, int n, int x) {
    int pivot = findPivot(A, 0, n - 1);
    if (pivot == -1)
        return binarySearch(A, 0, n - 1, x);
    if (A[pivot] == x)
        return pivot;
    if (A[0] <= x)
        return binarySearch(A, 0, pivot - 1, x);
    return binarySearch(A, pivot + 1, n - 1, x);
}

int main() {
    int T;
    cin >> T;
    while (T--) {
        int n, x;
        cin >> n >> x;
        vector<int> A(n);
        for (int i = 0; i < n; i++) {
            cin >> A[i];
        }
        int result = findElement(A, n, x);
        cout << result+ 1<< endl;
    }
    return 0;
}
